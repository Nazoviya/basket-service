// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: sql_values.sql

package db

import (
	"context"
)

const addToBasket = `-- name: AddToBasket :one
INSERT INTO userbasket (
    SELECT product_id, product_name, product_price, product_vat FROM products
    WHERE products.product_id = $1
) RETURNING product_id, product_name, product_price, product_vat
`

func (q *Queries) AddToBasket(ctx context.Context, productID int64) (Userbasket, error) {
	row := q.db.QueryRowContext(ctx, addToBasket, productID)
	var i Userbasket
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.ProductPrice,
		&i.ProductVat,
	)
	return i, err
}

const calculateBasket = `-- name: CalculateBasket :one
INSERT INTO total_basket (
    price,
    vat,
    total_price,
    discount
) VALUES (
    $1, $2, $3, $4
) RETURNING price, vat, total_price, discount
`

type CalculateBasketParams struct {
	Price      float32 `json:"price"`
	Vat        float32 `json:"vat"`
	TotalPrice float32 `json:"total_price"`
	Discount   float32 `json:"discount"`
}

func (q *Queries) CalculateBasket(ctx context.Context, arg CalculateBasketParams) (TotalBasket, error) {
	row := q.db.QueryRowContext(ctx, calculateBasket,
		arg.Price,
		arg.Vat,
		arg.TotalPrice,
		arg.Discount,
	)
	var i TotalBasket
	err := row.Scan(
		&i.Price,
		&i.Vat,
		&i.TotalPrice,
		&i.Discount,
	)
	return i, err
}

const completeOrder = `-- name: CompleteOrder :exec
DELETE FROM userbasket
`

func (q *Queries) CompleteOrder(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, completeOrder)
	return err
}

const deleteFromBasket = `-- name: DeleteFromBasket :exec
DELETE FROM userbasket
WHERE product_id = $1
`

func (q *Queries) DeleteFromBasket(ctx context.Context, productID int64) error {
	_, err := q.db.ExecContext(ctx, deleteFromBasket, productID)
	return err
}

const getPrice = `-- name: GetPrice :many
SELECT product_price
FROM userbasket
`

func (q *Queries) GetPrice(ctx context.Context) ([]float32, error) {
	rows, err := q.db.QueryContext(ctx, getPrice)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []float32
	for rows.Next() {
		var product_price float32
		if err := rows.Scan(&product_price); err != nil {
			return nil, err
		}
		items = append(items, product_price)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVAT = `-- name: GetVAT :many
SELECT product_vat
FROM userbasket
`

func (q *Queries) GetVAT(ctx context.Context) ([]int16, error) {
	rows, err := q.db.QueryContext(ctx, getVAT)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int16
	for rows.Next() {
		var product_vat int16
		if err := rows.Scan(&product_vat); err != nil {
			return nil, err
		}
		items = append(items, product_vat)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT product_id, product_name, product_price, product_vat FROM products
ORDER BY product_id
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductName,
			&i.ProductPrice,
			&i.ProductVat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const showBasket = `-- name: ShowBasket :many
SELECT product_id, product_name, product_price, product_vat FROM userbasket
ORDER BY product_id
`

func (q *Queries) ShowBasket(ctx context.Context) ([]Userbasket, error) {
	rows, err := q.db.QueryContext(ctx, showBasket)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Userbasket
	for rows.Next() {
		var i Userbasket
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductName,
			&i.ProductPrice,
			&i.ProductVat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
